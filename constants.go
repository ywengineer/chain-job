package job

import (
	"github.com/elastic/go-elasticsearch/v7/esapi"
	jsoniter "github.com/json-iterator/go"
	"github.com/ywengineer/g-util/es"
	"github.com/ywengineer/g-util/sql"
	"github.com/ywengineer/g-util/util"
	"go.uber.org/zap"
	"go.uber.org/zap/buffer"
	"sync"
)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var transport = &es.FastHttpTransport{}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const MetaSnowflakeID = "sf-id"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var reqBodyBufPool = buffer.NewPool()

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var jsonApi = jsoniter.Config{UseNumber: true, EscapeHTML: true}.Froze()

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var _es *esapi.API
var esMutex = sync.Mutex{}

const ConfAddress = "address"

func SetGlobalES(conf KeyValueConf, log *zap.Logger) {
	esMutex.Lock()
	defer esMutex.Unlock()
	if _es == nil && conf.Contains(ConfAddress) {
		_es = es.NewESClient(conf.GetStringSlice(ConfAddress), log)
	} else {
		util.Error("global elastic client already exists.", mysql.String())
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func newMySQLClient(conf KeyValueConf, log *zap.Logger) *sql.MySQL {
	return sql.NewMySQL(conf.GetString("user"), conf.GetString("password"), conf.GetString("host"), conf.GetString("db"),
		conf.GetString("loc"), conf.GetInt("port"), conf.GetInt("writeTimeout"), conf.GetInt("readTimeout"), conf.GetInt("dialTimeout"),
		conf.GetInt("maxOpenConn"), conf.GetInt("maxIdleConn"), log)
}

var mysql *sql.MySQL
var mysqlMutex = sync.Mutex{}

func SetGlobalMySQL(conf KeyValueConf, log *zap.Logger) {
	mysqlMutex.Lock()
	defer mysqlMutex.Unlock()
	if mysql == nil {
		mysql = newMySQLClient(conf, log)
	} else {
		util.Error("global mysql client already exists.", mysql.String())
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
